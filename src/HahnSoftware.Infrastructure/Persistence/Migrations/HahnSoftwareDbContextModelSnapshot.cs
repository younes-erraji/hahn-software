// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace HahnSoftware.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(HahnSoftwareDbContext))]
    partial class HahnSoftwareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Repliable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ThreadCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ThreadCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.CommentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId", "CommentId")
                        .IsUnique();

                    b.ToTable("CommentReactions");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Archive")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ArchiveDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(556)
                        .HasColumnType("nvarchar(556)");

                    b.Property<DateTimeOffset?>("UpdateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("nvarchar(156)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachments");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostBookmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId", "PostId")
                        .IsUnique();

                    b.ToTable("PostBookmarks");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId", "PostId")
                        .IsUnique();

                    b.ToTable("PostReactions");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ReplacementToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RevokationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RevokationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTimeOffset?>("DeletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("deletion_date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTimeOffset?>("LoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("MailVerification")
                        .HasColumnType("bit");

                    b.Property<string>("MailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("MailVerificationTokenExpiry")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Mail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Comment", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HahnSoftware.Domain.Entities.Comment", "ThreadComment")
                        .WithMany("Replies")
                        .HasForeignKey("ThreadCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("ThreadComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.CommentReaction", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Post", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostAttachment", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.Post", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostBookmark", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.Post", "Post")
                        .WithMany("Bookmarks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany("Bookmarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("HahnSoftware.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.Post", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("HahnSoftware.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookmarks");

                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("RefreshTokens");
                });
        }
    }
}
